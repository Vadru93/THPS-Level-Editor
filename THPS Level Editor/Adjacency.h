///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Source code for "Creating Efficient Triangle Strips"
// (C) 2000, Pierre Terdiman (p.terdiman@wanadoo.fr)
//
// Version is 2.0.
//
// Following adjacency structures have been successfully used to implement:
//				- a triangle striper
//				- a silhouette tracker [used for shadow volumes, occlusion culling, and glow!]
//				- local search for collision detection on terrains
//				- subdivision surfaces
//
//	So that one IS useful....
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __ADJACENCY_H__
#define __ADJACENCY_H__

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//																Class Adjacencies
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// MACROS
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	#define		MAKE_ADJ_TRI(x)			(x&0x3fffffff)
	#define		GET_EDGE_NB(x)			(x>>30)
	#define		IS_BOUNDARY(x)			(x==0xffffffff)

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Structures
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	struct AdjTriangle{									// Should be derived from a triangle structure
				unsigned int					VRef[3];		// Vertex-references
				unsigned int					ATri[3];		// Links/References of adjacent triangles. The 2 most significant bits contains
														// the counterpart edge in the adjacent triangle.
				unsigned char					FindEdge(unsigned int vref0, unsigned int vref1);
				unsigned int					OppositeVertex(unsigned int vref0, unsigned int vref1);
	};

	struct AdjEdge{
				unsigned int					Ref0;			// Vertex reference
				unsigned int					Ref1;			// Vertex reference
				unsigned int					FaceNb;			// Owner face
	};

	struct ADJACENCIESCREATE{
				ADJACENCIESCREATE()		{ DFaces = NULL; WFaces = NULL; NbFaces = 0; }
				unsigned int					NbFaces;		// #faces in source topo
				unsigned int*					DFaces;			// list of faces (dwords) or NULL
				unsigned short*					WFaces;			// list of faces (words) or NULL
	};

	class Adjacencies
	{
	private:
				unsigned int					mNbEdges;
				unsigned int					mCurrentNbFaces;
				AdjEdge*				mEdges;

				bool					AddTriangle(unsigned int ref0, unsigned int ref1, unsigned int ref2);
				bool					AddEdge(unsigned int ref0, unsigned int ref1, unsigned int face);
				bool					UpdateLink(unsigned int firsttri, unsigned int secondtri, unsigned int ref0, unsigned int ref1);
				unsigned char					FindEdge(AdjTriangle* tri, unsigned int vref0, unsigned int vref1);
	public:
				Adjacencies();
				~Adjacencies();

				unsigned int					mNbFaces;
				AdjTriangle*			mFaces;

				bool					Init(ADJACENCIESCREATE& create);
				bool					CreateDatabase();
	};

#endif // __ADJACENCY_H__
